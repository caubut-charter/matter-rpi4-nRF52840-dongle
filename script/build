#!/bin/bash

set -euETo pipefail
shopt -s inherit_errexit

cd "$(dirname "$0")/.."

usage() {
  echo -e 'Usage: build [OPTIONS] [ARTIFACT ...]\n'
  echo -e 'Examples:\n'
  echo -e '  build --all                     # Build all artifacts.'
  echo -e '  build --otbr-image              # Build the OTBR image.'
  echo -e ' Artifacts:\n'
  echo -e ' \t--otbr-image                   \t OpenThread Border Router image'
  echo -e ' \t--ot-nrf528xx-environment-image\t OpenThread RCP firmware'
  echo -e ' \t                               \t build environment container image'
  echo -e ' \t--nrf52840-dongle-ot-rcp       \t OpenThread RCP firmware'
  echo -e ' \t--ot-commissioner-image        \t OpenThread commissioner container'
  echo -e ' \t                               \t image'
  echo -e ' \t--nrfconnect-toolchain-image   \t Base container image for'
  echo -e ' \t                               \t nrfconnect-chip-environment-image'
  echo -e ' \t--nrfconnect-chip-environment-image'
  echo -e ' \t                               \t nRF52840 dongle-Matter build'
  echo -e ' \t                               \t environment container image'
  echo -e ' \t--nrf52840-dongle-thread-lighting-app'
  echo -e ' \t                               \t nRF52840 dongle Thread light'
  echo -e ' \t                               \t firmware'
  echo -e ' \t--chip-environment-image       \t general Matter build and runtime'
  echo -e ' \t                               \t environment'
  echo -e ' \t--chip-device-ctrl             \t Python Matter controller DNS-SD'
  echo -e ' \t--avahi-utils-image            \t utilities'
  echo -e ' \t--nrfutil-image                \t nRF52840 dongle flashing utility'
  echo -e ' \t                               \t container image'
  echo -e ' \t-a, --all                      \t all artifacts\n'
  echo -e ' Options:\n'
  echo -e ' \t-c, --clean                    \t clean non-Docker build artifacts'
  echo -e ' \t-f, --fix-permissions          \t fix permission errors'
  echo -e ' \t-h, --help                     \t print this help list'
}

clean() (
  echo "==> Removing 'build'..."
  rm -rf build
  cd third_party
  readarray -t repos < <(
    shopt -s dotglob
    shopt -s nullglob
    repos=(*/)
    printf '%s\n' "${repos[@]}"
  )
  for repo in "${repos[@]}"; do
    (
      (cd "$repo" && echo "==> Resetting '$(git config --get remote.origin.url)'...") \
      && set -x \
      && cd "$repo" \
      && git reset --hard && git clean -fdx \
      && git submodule foreach --recursive git reset --hard && git submodule foreach --recursive git clean -fdx
    )
  done
)

ARCH=$(uname -m)
if [[ $ARCH = "x86_64" ]]; then
  TARGETARCH='amd64'
elif [[ $ARCH = "aarch64" ]]; then
  TARGETARCH='arm64'
else
  echo "Unsupported architecture: $ARCH"
  exit 1;
fi

DOCKER_BUILDKIT=${DOCKER_BUILDKIT-}

ORG=${ORG:-}
if [[ -n $ORG ]]; then ORG="$ORG/"; fi
DOCKER_BUILD=${DOCKER_BUILD:-docker build}
VERSION=${VERSION:-latest}

CLEAN=false
FIX_PERMISSIONS=false

OTBR_IMAGE=false
OT_NRF528XX_ENVIRONMENT_IMAGE=false
NRF52840_DONGLE_OT_RCP=false
OT_COMMISSIONER_IMAGE=false
NRFCONNECT_TOOLCHAIN_IMAGE=false
NRFCONNECT_CHIP_ENVIRONMENT_IMAGE=false
NRF52840_DONGLE_THREAD_LIGHTING_APP=false
CHIP_ENVIRONMENT_IMAGE=false
CHIP_DEVICE_CTRL=false
AVAHI_UTILS_IMAGE=false
NRFUTIL_IMAGE=false

while [ $# -gt 0 ]; do
  case $1 in
    --otbr-image) OTBR_IMAGE=true ;;
    --ot-nrf528xx-environment-image) OT_NRF528XX_ENVIRONMENT_IMAGE=true ;;
    --nrf52840-dongle-ot-rcp) NRF52840_DONGLE_OT_RCP=true ;;
    --ot-commissioner-image) OT_COMMISSIONER_IMAGE=true ;;
    --nrfconnect-toolchain-image) NRFCONNECT_TOOLCHAIN_IMAGE=true ;;
    --nrfconnect-chip-environment-image) NRFCONNECT_CHIP_ENVIRONMENT_IMAGE=true ;;
    --nrf52840-dongle-thread-lighting-app) NRF52840_DONGLE_THREAD_LIGHTING_APP=true ;;
    --chip-environment-image) CHIP_ENVIRONMENT_IMAGE=true ;;
    --chip-device-ctrl) CHIP_DEVICE_CTRL=true ;;
    --avahi-utils-image) AVAHI_UTILS_IMAGE=true ;;
    --nrfutil-image) NRFUTIL_IMAGE=true ;;
    --all)
        OTBR_IMAGE=true
        OT_NRF528XX_ENVIRONMENT_IMAGE=true
        NRF52840_DONGLE_OT_RCP=true
        OT_COMMISSIONER_IMAGE=true
        NRFCONNECT_TOOLCHAIN_IMAGE=true
        NRFCONNECT_CHIP_ENVIRONMENT_IMAGE=true
        NRF52840_DONGLE_THREAD_LIGHTING_APP=true
        CHIP_ENVIRONMENT_IMAGE=true
        CHIP_DEVICE_CTRL=true
        AVAHI_UTILS_IMAGE=true
        NRFUTIL_IMAGE=true
        ;;
    -c | --clean) CLEAN=true ;;
    -f | --fix-permissions) FIX_PERMISSIONS=true ;;
    -h | --help) usage; exit;;
    *) usage; exit 1 ;;
  esac
  shift
done

declare -A HASHES=(
  ['third_party/ot-nrf528xx/openthread/etc/docker/environment/Dockerfile']='14ca28d53cfbbf8c99d33fd31d3c7511'
  ['third_party/nrfconnect-chip-docker/nrfconnect-toolchain/Dockerfile']='0dceb02b0e528798bc54209547baefb5'
  ['third_party/nrfconnect-chip-docker/nrfconnect-chip/Dockerfile']='4878612ae4cebb9d69deabe46cc234d9'
)

declare -A HASH_CHECKS=(
  ['third_party/ot-nrf528xx/openthread/etc/docker/environment/Dockerfile']=$OT_NRF528XX_ENVIRONMENT_IMAGE
  ['third_party/nrfconnect-chip-docker/nrfconnect-toolchain/Dockerfile']=$NRFCONNECT_CHIP_ENVIRONMENT_IMAGE
  ['third_party/nrfconnect-chip-docker/nrfconnect-chip/Dockerfile']=$NRFCONNECT_CHIP_ENVIRONMENT_IMAGE
)

check_hash () {
  # shellcheck disable=SC2207
  MD5=($(md5sum "$1"))
  if [[ -v "HASHES[$1]" && -v "HASH_CHECKS[$1]" && ${HASH_CHECKS[$1]} && ${MD5[0]} != "${HASHES[$1]}" ]]; then
    echo -e "HASH_ERROR: $1\n"
    echo -e "Unable to patch file, hash mismatch."
    echo -e "Manually validate the patch and update the hash to proceed.\n"
    echo -e "FILE:     ${MD5[1]}"
    echo -e "COMPUTED: ${MD5[0]}"
    echo -e "EXPECTED: ${HASHES[$1]}"
    exit 1;
  fi
}

if [ "$FIX_PERMISSIONS" = true ]; then
  echo "==> Fixing permissions..."
  docker run --rm \
    -v "$PWD":/root \
    -w /root \
    ubuntu:21.04 /bin/bash -c "chown -R $(id -u):$(id -g) ."
fi

if [ "$CLEAN" = true ]; then
  clean
fi

mkdir -p build/Release

if [[ "$OTBR_IMAGE" = true ]]; then
  echo "==> Building 'otbr-image'..."
  (cd third_party/ot-br-posix \
    && set -x && $DOCKER_BUILD --build-arg INFRA_IF_NAME=eth1 -t "${ORG}otbr:$VERSION" -f etc/docker/Dockerfile .)
fi

if [[ "$OT_NRF528XX_ENVIRONMENT_IMAGE" = true ]]; then
  echo "==> Building 'ot-nrf528xx-environment-image'..."
  (cd third_party/ot-nrf528xx/openthread && git reset --hard)
  check_hash 'third_party/ot-nrf528xx/openthread/etc/docker/environment/Dockerfile'

  # shellcheck disable=SC1003
  sed -i \
    -e '21,$d' \
    -e '/python3 -m pip install -U cmake/i \    && python3 -m pip install --upgrade pip \\' \
    third_party/ot-nrf528xx/openthread/etc/docker/environment/Dockerfile

  (cd third_party/ot-nrf528xx/openthread \
    && set -x && $DOCKER_BUILD -t "${ORG}ot-nrf528xx-environment:$VERSION" -f etc/docker/environment/Dockerfile .)
fi

if [[ "$NRFUTIL_IMAGE" = true ]]; then
  echo "==> Building 'nrfutil-image'..."
  (set -x && $DOCKER_BUILD -t "${ORG}nrfutil:$VERSION" etc/docker/nordicsemi/nrfutil)
fi

if [[ "$NRF52840_DONGLE_OT_RCP" = true ]]; then
  echo "==> Building 'nrf52840-dongle-ot-rcp'..."
  docker run --rm \
    -v "$PWD"/third_party/ot-nrf528xx:/ot-nrf528xx \
    -v "$PWD"/build/ot-nrf528xx:/ot-nrf528xx/build \
    -w /ot-nrf528xx \
    "${ORG}ot-nrf528xx-environment:${VERSION}" /bin/bash -c \
    'script/bootstrap && script/build nrf52840 USB_trans -DOT_BOOTLOADER=USB -DOT_THREAD_VERSION=1.2 && arm-none-eabi-objcopy -O ihex build/bin/ot-rcp build/bin/nrf52840-dongle-ot-rcp.hex'
  docker run --rm  \
    -v "$PWD"/build/ot-nrf528xx/bin:/root \
    "${ORG}nrfutil:${VERSION}" pkg generate --hw-version 52 --sd-req=0x00 \
    --application nrf52840-dongle-ot-rcp.hex --application-version 1 nrf52840-dongle-ot-rcp.zip
  echo "==> Fixing permissions..."
  docker run --rm \
    -v "$PWD"/third_party/ot-nrf528xx:/ot-nrf528xx \
    -v "$PWD"/build/ot-nrf528xx:/ot-nrf528xx/build \
    ubuntu:21.04 /bin/bash -c "chown -R $(id -u):$(id -g) /ot-nrf528xx"
  echo "==> Generating release artifact..."
  mkdir -p build/Release
  mv build/ot-nrf528xx/bin/nrf52840-dongle-ot-rcp.zip build/Release
fi

if [[ "$OT_COMMISSIONER_IMAGE" = true ]]; then
  echo "==> Building 'ot-commissioner-image'..."
  (cd third_party/ot-commissioner && set -x && $DOCKER_BUILD \
    -t "${ORG}ot-commissioner:$VERSION" -f ../../etc/docker/openthread/ot-commissioner/Dockerfile .)
fi

if [[ "$NRFCONNECT_TOOLCHAIN_IMAGE" = true ]]; then
  echo "==> Building 'nrfconnect-toolchain-image'..."
  (cd third_party/nrfconnect-chip-docker && git reset --hard)
  check_hash 'third_party/nrfconnect-chip-docker/nrfconnect-toolchain/Dockerfile'

  # shellcheck disable=SC2016
  sed -i \
    -e '44,52d' \
    -e 's/\${TOOLCHAIN_URL}/https:\/\/developer.arm.com\/-\/media\/Files\/downloads\/gnu-rm\/9-2020q2\/gcc-arm-none-eabi-9-2020-q2-update-$(uname -m)-linux.tar.bz2/' \
    -e 's/\(libpython3-dev\) \\/\1 make \\/' \
    -e 's/gcc-arm-none-eabi-9-2019-q4-major/gcc-arm-none-eabi-9-2020-q2-update/' \
    third_party/nrfconnect-chip-docker/nrfconnect-toolchain/Dockerfile

  (cd third_party/nrfconnect-chip-docker/nrfconnect-toolchain \
    && set -x && $DOCKER_BUILD -t "${ORG}nrfconnect-toolchain:$VERSION" .)
fi

if [[ "$NRFCONNECT_CHIP_ENVIRONMENT_IMAGE" = true ]]; then
  echo "==> Building 'nrfconnect-chip-environment-image'..."
  (cd third_party/nrfconnect-chip-docker && git reset --hard)
  check_hash 'third_party/nrfconnect-chip-docker/nrfconnect-chip/Dockerfile'

  [[ -z "$DOCKER_BUILDKIT" ]] && FLAGS="--build-arg TARGETARCH=$TARGETARCH" || FLAGS=''

  # shellcheck disable=SC2016
  sed -i \
    -e '/^ARG NCS_REVISION/i \ARG TARGETARCH' \
    -e 's/amd64/${TARGETARCH}/' \
    -e 's/g++-multilib //' \
    third_party/nrfconnect-chip-docker/nrfconnect-chip/Dockerfile

  # shellcheck disable=SC2086
  (cd third_party/nrfconnect-chip-docker/nrfconnect-chip \
    && set -x && $DOCKER_BUILD $FLAGS \
    --build-arg "BASE=${ORG}nrfconnect-toolchain:$VERSION" -t "${ORG}nrfconnect-chip-environment:$VERSION" .)
fi

if [[ "$NRF52840_DONGLE_THREAD_LIGHTING_APP" = true ]]; then
  echo "==> Building 'nrf52840-dongle-thread-lighting-app'..."
  docker run --rm \
    -e CHIP_REVISION="$(cd third_party/connectedhomeip && git rev-parse --short HEAD)" \
    -v "$PWD"/third_party/connectedhomeip:/var/chip \
    -v "$PWD"/build/nrf-sdk:/var/ncs \
    -v "$PWD"/build/nrf52840-dongle-thread-lighting-app/nrfconnect:/var/chip/examples/lighting-app/nrfconnect/build \
    "${ORG}nrfconnect-chip-environment:$VERSION" \
    'setup -y && python3 scripts/setup/nrfconnect/update_ncs.py --update && cd examples/lighting-app/nrfconnect && west build -b nrf52840dongle_nrf52840'
  docker run --rm \
    -v "$PWD"/build/nrf52840-dongle-thread-lighting-app/nrfconnect/zephyr:/root \
    "${ORG}nrfutil:$VERSION" pkg generate --hw-version 52 --sd-req=0x00 \
    --application zephyr.hex --application-version 1 "nrf52840-dongle-thread-lighting-app.zip"
  echo "==> Fixing permissions (may take a couple minutes)..."
  docker run --rm \
    -v "$PWD"/third_party/connectedhomeip:/var/chip \
    -v "$PWD"/build/nrf-sdk:/var/ncs \
    -v "$PWD"/build/nrf52840-dongle-thread-lighting-app/nrfconnect:/var/chip/examples/lighting-app/nrfconnect/build \
    ubuntu:21.04 /bin/bash -c "chown -R $(id -u):$(id -g) /var/chip /var/ncs"
  echo "==> Generating release artifact..."
  mkdir -p build/Release
  mv "build/nrf52840-dongle-thread-lighting-app/nrfconnect/zephyr/nrf52840-dongle-thread-lighting-app.zip" build/Release
fi

if [[ "$CHIP_ENVIRONMENT_IMAGE" = true ]]; then
  echo "==> Building 'chip-environment-image'..."
  (set -x && $DOCKER_BUILD -t "${ORG}chip-environment:$VERSION" etc/docker/connectedhomeip/environment)
fi

if [[ "$CHIP_DEVICE_CTRL" = true ]]; then
  echo "==> Building 'chip-device-ctrl'..."
  docker run --rm --entrypoint /bin/bash \
    -v "$PWD"/third_party/connectedhomeip:/var/chip \
    -v "$PWD"/build/chip-device-ctrl:/var/chip/out \
    "${ORG}chip-environment:$VERSION" -c \
    'scripts/build_python.sh -m platform'
  echo "==> Fixing permissions (may take a couple minutes)..."
  docker run --rm \
    -v "$PWD"/third_party/connectedhomeip:/var/chip \
    -v "$PWD"/build/Release/chip-device-ctrl:/var/chip/out \
    ubuntu:21.04 /bin/bash -c "chown -R $(id -u):$(id -g) /var/chip"
fi

if [[ "$AVAHI_UTILS_IMAGE" = true ]]; then
  echo "==> Building 'avahi-utils-image'..."
  (set -x && $DOCKER_BUILD -t "${ORG}avahi-utils:$VERSION" etc/docker/avahi/avahi-utils)
fi
