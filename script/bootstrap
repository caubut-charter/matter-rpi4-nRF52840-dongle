#!/bin/bash

set -euETo pipefail
shopt -s inherit_errexit

cd "$(dirname "$0")/.."

usage () {
  echo -e 'Usage: bootstrap [OPTIONS] [[TARGET [COMMIT|BRANCH|TAG]] ...]\n'
  echo -e 'Examples:'
  echo -e ' \tbootstrap --all                    \t Bootstrap everything.'
  echo -e ' \tbootstrap --chip                   \t Bootstrap latest Matter source.'
  echo -e ' \tbootstrap --chip test_event_7      \t Bootstrap latest Matter source.'
  echo -e ' \t                                   \t Checkout the '\''test_event_7'\'''
  echo -e ' \t                                   \t Matter branch.'
  echo -e ' \tbootstrap --chip test_event_7 --all\t Bootstrap everything.'
  echo -e ' \t                                   \t Checkout the '\''test_event_7'\'''
  echo -e ' \t                                   \t Matter branch.\n'
  echo -e ' Targets:'
  echo -e ' \t--otbr                  \t OpenThread Border Router'
  echo -e ' \t--nrf52840-dongle-ot-rcp\t nRF528xx OpenThread RCP firmware'
  echo -e ' \t--ot-commissioner       \t OpenThread Commissioner'
  echo -e ' \t--nrfconnect-chip       \t nRF Connect / Matter build environment'
  echo -e ' \t--chip                  \t Matter (Connected Home IP a.k.a CHIP)'
  echo -e ' \t-a, --all               \t all targets\n'
  echo -e ' Options:'
  echo -e ' \t-f, --fix-permissions\t fix permission errors'
  echo -e ' \t-h, --help           \t print this help list'
}

FIX_PERMISSIONS=false

OTBR=false
NRF52840_DONGLE_OT_RCP=false
OT_COMMISSIONER=false
NRFCONNECT_CHIP=false
CONNECTEDHOMEIP=false

declare -A repos
repos=()

# shellcheck disable=SC2120
otbr() {
  OTBR=true
  checkout=${1:-main}
  repos['https://github.com/openthread/ot-br-posix']="$checkout"
}

# shellcheck disable=SC2120
nrf52840_dongle_ot_rcp() {
  NRF52840_DONGLE_OT_RCP=true
  checkout=${1:-main}
  repos['https://github.com/openthread/ot-nrf528xx.git']="$checkout"
}

# shellcheck disable=SC2120
ot_commissioner() {
  OT_COMMISSIONER=true
  checkout=${1:-main}
  repos['https://github.com/openthread/ot-commissioner.git']="$checkout"
}

# shellcheck disable=SC2120
nrfconnect_chip() {
  NRFCONNECT_CHIP=true
  checkout=${1:-master}
  repos['https://github.com/NordicPlayground/nrfconnect-chip-docker.git']="$checkout"
}

# shellcheck disable=SC2120
connectedhomeip() {
  NRFCONNECT_CHIP=true
  checkout=${1:-master}
  repos['https://github.com/project-chip/connectedhomeip.git']="$checkout"
}

all() {
  # shellcheck disable=SC2119
  [ "$OTBR" = true ] || otbr
  # shellcheck disable=SC2119
  [ "$NRF52840_DONGLE_OT_RCP" = true ] || nrf52840_dongle_ot_rcp
  # shellcheck disable=SC2119
  [ "$OT_COMMISSIONER" = true ] || ot_commissioner
  # shellcheck disable=SC2119
  [ "$NRFCONNECT_CHIP" = true ] || nrfconnect_chip
  # shellcheck disable=SC2119
  [ "$CONNECTEDHOMEIP" = true ] || connectedhomeip
}

args=("$@")

process_source() {
  if [ ${#args[@]} -gt 1 ]; then
    case ${args[1]} in
      -*) $1 ;;
      *)
        $1 "${args[1]}"
        args=("${args[@]:1}");
        ;;
    esac
  else
    $1
  fi
}

while [ ${#args[@]} -gt 0 ]; do
  case ${args[0]} in
    --otbr) process_source otbr ;;
    --nrf52840-dongle-ot-rcp) process_source nrf52840_dongle_ot_rcp ;;
    --ot-commissioner) process_source ot_commissioner ;;
    --nrfconnect-chip) process_source nrfconnect_chip ;;
    --chip) process_source connectedhomeip ;;
    -a | --all) all ;;
    -f | --fix-permissions) FIX_PERMISSIONS=true ;;
    -h | --help) usage; exit;;
    *) usage; exit 1 ;;
  esac
  args=("${args[@]:1}");
done

if [ "$FIX_PERMISSIONS" = true ]; then
  echo "==> Fixing permissions (may take a couple minutes)..."
  docker run --rm \
    -v "$PWD":/root \
    -w /root \
    ubuntu:21.04 /bin/bash -c "chown -R $(id -u):$(id -g) ."
fi

mkdir -p third_party

for repo in "${!repos[@]}"; do
  (
    cd third_party
    (
      dir=$(tmp=${repo##*/};echo "${tmp%.*}")
      if [[ ! -d $dir ]]; then (set -x && mkdir -p "$dir"); fi
      cd "$dir"
      if [[ $(git rev-parse --git-dir 2> /dev/null) != '.git' ]]; then
        echo "==> Cloning '$repo'..."
        (set -x && git clone -j8 "$repo" .)
      else
        echo "==> Updating '$repo'..."
        (
          set -x \
          && git fetch \
          && git reset --hard && git clean -fd \
          && git submodule foreach --recursive git reset --hard \
          && git submodule foreach --recursive git clean -fd
        )
      fi
      echo "==> Checking out '${repos[$repo]}'..."
      (
        set -x \
        && git checkout -B "${repos[$repo]}" "origin/${repos[$repo]}" \
        && git submodule update --init --recursive
      )
    )
  )
done

if [[ "$OTBR" = true ]]; then
  (set -x && cd third_party/ot-br-posix && WEB_GUI=1 ./script/bootstrap)
fi
